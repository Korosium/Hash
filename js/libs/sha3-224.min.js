"use strict";const sha3_224=(()=>{const R=144;const CHECKSUM_LENGTH=28;const keccak=(()=>{const BEGINNING_PAD=0x06;const ENDING_PAD=0x80;const ROUNDS=24;const RC=[0x8000000000000000n,0x4101000000000000n,0x5101000000000001n,0x0001000100000001n,0xd101000000000000n,0x8000000100000000n,0x8101000100000001n,0x9001000000000001n,0x5100000000000000n,0x1100000000000000n,0x9001000100000000n,0x5000000100000000n,0xd101000100000000n,0xd100000000000001n,0x9101000000000001n,0xc001000000000001n,0x4001000000000001n,0x0100000000000001n,0x5001000000000000n,0x5000000100000001n,0x8101000100000001n,0x0101000000000001n,0x8000000100000000n,0x1001000100000001n];const ROTATION_OFFSETS=[0n,36n,3n,41n,18n,1n,44n,10n,45n,2n,62n,6n,43n,15n,61n,28n,55n,25n,21n,56n,27n,20n,39n,8n,14n];const STATE_SIZE=25;const ROW_SIZE=5;const keccak_f=state=>{for(let i=0;i<ROUNDS;i++){state=round(state,RC[i]);}return state;};const round=(state,rc)=>{state=theta(state);state=chi(state,rho_and_pi(state));state=iota(state,rc);return state;};const theta=state=>{let c=new BigUint64Array(ROW_SIZE);for(let i=0;i<ROW_SIZE;i++)c[i]=state[i*ROW_SIZE]^state[i*ROW_SIZE+1]^state[i*ROW_SIZE+2]^state[i*ROW_SIZE+3]^state[i*ROW_SIZE+4];let d=new BigUint64Array(ROW_SIZE);for(let i=0;i<ROW_SIZE;i++)d[i]=c[(i-1+ROW_SIZE)%ROW_SIZE]^rotr(c[(i+1)%ROW_SIZE],1n);for(let i=0;i<STATE_SIZE;i++)state[i]^=d[(i/ROW_SIZE)&0xff];return state;};const rho_and_pi=state=>{let temp_state=new BigUint64Array(STATE_SIZE);for(let i=0;i<STATE_SIZE;i++){const row=(i/ROW_SIZE&0xff);const first=row*ROW_SIZE+(2*(i%ROW_SIZE)+3*row)%ROW_SIZE;const second=(i*ROW_SIZE)%STATE_SIZE+row;temp_state[first]=rotr(state[second],ROTATION_OFFSETS[second]);}return temp_state;};const chi=(state,temp_state)=>{for(let i=0;i<STATE_SIZE;i++){const row=i/ROW_SIZE&0xff;const first=i*ROW_SIZE%STATE_SIZE+row;const second=(i+1)*ROW_SIZE%STATE_SIZE+row;const third=(i+2)*ROW_SIZE%STATE_SIZE+row;state[first]=temp_state[first]^~temp_state[second]&temp_state[third];}return state;};const iota=(state,rc)=>{state[0]^=rc;return state;};const init_chunk=(chunk,rate)=>{if(chunk.length===rate)return reverse_byte_array(chunk);const missing_bytes=rate-chunk.length;if(missing_bytes===1){chunk.push(BEGINNING_PAD+ENDING_PAD);return reverse_byte_array(chunk);}chunk.push(BEGINNING_PAD);for(let i=0;i<missing_bytes-2;i++){chunk.push(0);}chunk.push(ENDING_PAD);return reverse_byte_array(chunk);};const reverse_byte=n=>((n&0b10000000)>>>7)|((n&0b01000000)>>>5)|((n&0b00100000)>>>3)|((n&0b00010000)>>>1)|((n&0b00001000)<<1)|((n&0b00000100)<<3)|((n&0b00000010)<<5)|((n&0b00000001)<<7);const reverse_byte_array=arr=>arr.map(x=>reverse_byte(x));const xor_state=(state,chunk,rate)=>{for(let i=0;i<rate;i+=8){state[i/8*ROW_SIZE%STATE_SIZE+i/8/ROW_SIZE&0xff]^=byte_to_uint64(chunk.slice(i,i+8));}return state;};const extract_byte=(state,rate)=>{let output=[];for(let i=0;i<STATE_SIZE;i++){output=output.concat(reverse_byte_array(uint64_to_byte(state[i*ROW_SIZE%STATE_SIZE+i/ROW_SIZE&0xff])));if(output.length>=rate)break;}return output.slice(0,rate);};const uint64_to_byte=n=>[Number(n>>56n),Number(n>>48n&0xffn),Number(n>>40n&0xffn),Number(n>>32n&0xffn),Number(n>>24n&0xffn),Number(n>>16n&0xffn),Number(n>>8n&0xffn),Number(n&0xffn)];const byte_to_uint64=b=>((BigInt(b[0])<<56n)|(BigInt(b[1])<<48n)|(BigInt(b[2])<<40n)|(BigInt(b[3])<<32n)|(BigInt(b[4])<<24n)|(BigInt(b[5])<<16n)|(BigInt(b[6])<<8n)|BigInt(b[7]));const rotr=(n,i)=>(n>>i)|(n<<(64n-i));return{keccak(data,rate,length){const bytes=conversion.to_byte(data);let state=new BigUint64Array(STATE_SIZE);for(let i=0;i<=bytes.length;i+=rate){state=keccak_f(xor_state(state,init_chunk(bytes.slice(i,i+rate),rate),rate));}let output=extract_byte(state,rate);while(output.length<length){state=keccak_f(state);output=output.concat(extract_byte(state,rate));}return output.slice(0,length);}}})();const conversion=(()=>{return{to_byte(data){const type=Object.prototype.toString.call(data);switch(type){case"[object Array]":return data.slice();case"[object String]":return[].slice.call(new TextEncoder().encode(data));case"[object Uint8Array]":return[].slice.call(data);case"[object ArrayBuffer]":return[].slice.call(new Uint8Array(data));default:throw new Error(`Invalid data type "${type}" provided.`);}},to_hex(arr){return arr.map(x=>x.toString(16).padStart(2,'0')).join('');},to_base64(arr){return btoa(arr.map(x=>String.fromCharCode(x)).join(''));}}})();const hash=(()=>{return{array(data){return keccak.keccak(data,R,CHECKSUM_LENGTH);},hex(data){return conversion.to_hex(this.array(data));},base64(data){return conversion.to_base64(this.array(data));}}})();return{hash:hash}})();