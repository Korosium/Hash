"use strict";const md4=(()=>{const logic=(()=>{const H=[0x67452301,0xefcdab89,0x98badcfe,0x10325476];const K=[0x5a827999,0x6ed9eba1];const S=[3,7,11,19,3,5,9,13,3,9,11,15];const transform=(registers,slice,length)=>{if(slice.length===64)return compress(registers,convert(slice));else if(slice.length>=56)return compress(compress(registers,convert(pad(slice))),append(convert(pad([],0)),length));else return compress(registers,append(convert(pad(slice)),length));};const pad=(slice,first=0x80)=>{slice[slice.length]=first;for(let i=slice.length;i<64;i++)slice[i]=0;return slice;};const convert=slice=>{let retval=new Uint32Array(slice.length/4);for(let i=0;i<retval.length;i++)retval[i]=(slice[i*4+3]<<24)|(slice[i*4+2]<<16)|(slice[i*4+1]<<8)|slice[i*4];return retval;};const append=(chunk,length)=>{const hex=(length*8).toString(16).padStart(16,"0");chunk[chunk.length-2]=parseInt(hex.substring(8,16),16);chunk[chunk.length-1]=parseInt(hex.substring(0,8),16);return chunk;};const compress=(registers,chunk)=>{let r=new Uint32Array(registers);for(let i=0;i<48;i++){let f,g,k;if(i<16){f=(r[1]&r[2])|((~r[1])&r[3]);g=i;k=0;}else if(i>=16&&i<32){f=(r[1]&r[2])|(r[1]&r[3])|(r[2]&r[3]);g=calcG(i,[0,1,2,3]);k=K[0];}else{f=r[1]^r[2]^r[3];g=calcG(i,[0,2,1,3]);k=K[1];}f=f+r[0]+k+chunk[g];r[0]=r[3];r[3]=r[2];r[2]=r[1];r[1]=rotl(f,S[i%4+4*((i/16)&0xff)]);}for(let i=0;i<r.length;i++)r[i]+=registers[i];return r;};const calcG=(i,m)=>4*m[i%4]+m[(i%16)/4&0xff];const serialize=registers=>{let retval=[];for(let i=0;i<registers.length;i++){retval[i*4]=registers[i]&0xff;retval[i*4+1]=(registers[i]>>>8)&0xff;retval[i*4+2]=(registers[i]>>>16)&0xff;retval[i*4+3]=(registers[i]>>>24)&0xff;}return retval;};const rotl=(n,i)=>(n<<i)|(n>>>(32-i));return{process(data){const bytes=conversion.to_byte(data);let registers=new Uint32Array(H);for(let i=0;i<=bytes.length;i+=64)registers=transform(registers,bytes.slice(i,i+64),bytes.length);return serialize(registers);}}})();const conversion=(()=>{return{to_byte(data){const type=Object.prototype.toString.call(data);switch(type){case"[object Array]":return data.slice();case"[object String]":return[].slice.call(new TextEncoder().encode(data));case"[object Uint8Array]":return[].slice.call(data);case"[object ArrayBuffer]":return[].slice.call(new Uint8Array(data));default:throw new Error(`Invalid data type "${type}" provided.`);}},to_hex(arr){return arr.map(x=>x.toString(16).padStart(2,'0')).join('');},to_base64(arr){return btoa(arr.map(x=>String.fromCharCode(x)).join(''));}}})();const hash=(()=>{return{array(data){return logic.process(data);},hex(data){return conversion.to_hex(this.array(data));},base64(data){return conversion.to_base64(this.array(data));}}})();return{hash:hash}})();